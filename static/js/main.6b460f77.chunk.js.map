{"version":3,"sources":["face000.png","face001.png","face002.png","face003.png","face004.png","face005.png","face006.png","button.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","display","face0","count","message","clear","setState","roll","newCount","randomFace","Math","floor","random","face1","face2","face3","face4","face5","face6","testPrint","console","log","className","this","id","Fragment","src","clickPlay","alt","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,oUC8F5BC,G,iNAjFbC,MAAM,CACJC,QAAQ,GAAD,OAAKC,KACZC,MAAO,EACPC,QAAS,I,EAITC,MAAM,WACJ,EAAKC,SAAS,CAACH,MAAM,EAAGC,QAAQ,M,EAGlCG,KAAK,WACH,IACIC,EADAC,EAAWC,KAAKC,MAAsB,EAAhBD,KAAKE,UAEd,GAAZH,GACDD,EAAS,EAAKR,MAAMG,MAAM,EAC1B,EAAKG,SAAS,CAACH,MAAMK,EAAUP,QAAQY,IAAOT,QAAQ,cACtD,EAAKC,SAEa,GAAZI,GACND,EAAS,EAAKR,MAAMG,MAAM,EAC1B,EAAKG,SAAS,CAAEH,MAAMK,EAAUP,QAAQa,MAEpCN,GAAY,IACd,EAAKF,SAAS,CAACF,QAAQ,cAGP,GAAZK,GACND,EAAS,EAAKR,MAAMG,MAAM,EAC1B,EAAKG,SAAS,CAACH,MAAMK,EAAUP,QAAQc,MACpCP,GAAU,IACX,EAAKF,SAAS,CAACF,QAAQ,cAGP,GAAZK,GACND,EAAS,EAAKR,MAAMG,MAAM,EAC1B,EAAKG,SAAS,CAACH,MAAMK,EAAUP,QAAQe,MACpCR,GAAU,IACX,EAAKF,SAAS,CAACF,QAAQ,cAGP,GAAZK,GACND,EAAS,EAAKR,MAAMG,MAAM,EAC1B,EAAKG,SAAS,CAACH,MAAMK,EAAUP,QAAQgB,MACpCT,GAAU,IACX,EAAKF,SAAS,CAACF,QAAQ,cAGP,GAAZK,IACND,EAAS,EAAKR,MAAMG,MAAM,EAC1B,EAAKG,SAAS,CAACH,MAAMK,EAAUP,QAAQiB,MACpCV,GAAU,IACX,EAAKF,SAAS,CAACF,QAAQ,e,EAK/Be,UAAU,WACRC,QAAQC,IAAI,gC,wEAGL,IAAD,OACN,OAGE,yBAAKC,UAAU,OACW,aAAvBC,KAAKvB,MAAMI,QACR,wBAAIoB,GAAG,UAAUF,UAAU,QAAQC,KAAKvB,MAAMI,SAEhD,kBAAC,IAAMqB,SAAP,KACE,yBAAKC,IAAKC,IAAWC,IAAI,UAAUC,QAAS,kBAAI,EAAKtB,UACrD,yBAAKmB,IAAKH,KAAKvB,MAAMC,QAAS2B,IAAI,YAClC,wBAAIJ,GAAG,QAAQF,UAAU,QAAzB,UAAwCC,KAAKvB,MAAMG,OACnD,wBAAIqB,GAAG,UAAUF,UAAU,QAAQC,KAAKvB,MAAMI,e,GA1E1C0B,IAAMC,YCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6b460f77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face000.cdbf4da4.png\";","module.exports = __webpack_public_path__ + \"static/media/face001.166be804.png\";","module.exports = __webpack_public_path__ + \"static/media/face002.090aec2d.png\";","module.exports = __webpack_public_path__ + \"static/media/face003.ef9d2659.png\";","module.exports = __webpack_public_path__ + \"static/media/face004.a063cb20.png\";","module.exports = __webpack_public_path__ + \"static/media/face005.7107b41a.png\";","module.exports = __webpack_public_path__ + \"static/media/face006.ccb29bfc.png\";","module.exports = __webpack_public_path__ + \"static/media/button.e5095c41.png\";","import React from 'react';\nimport face0 from'./face000.png';\nimport face1 from'./face001.png';\nimport face2 from'./face002.png';\nimport face3 from'./face003.png';\nimport face4 from'./face004.png';\nimport face5 from'./face005.png';\nimport face6 from'./face006.png';\nimport clickPlay from './button.png'\nimport './App.css';\n\n\nclass App extends React.Component {\n  state={\n    display: `${face0}`,\n    count: 0,\n    message: \"\"\n\n  }\n\n    clear=()=>{\n      this.setState({count:0, message:\"\"});\n    }\n\n    roll=()=>{\n      let randomFace=Math.floor(Math.random() * 6);\n      let newCount;\n        if(randomFace==0){\n          newCount=this.state.count+1;\n          this.setState({count:newCount, display:face1, message:\"You lose!\"})\n          this.clear();\n        }\n        else if(randomFace==1) {\n          newCount=this.state.count+2;\n          this.setState({ count:newCount, display:face2 })\n          // newCount >= 20 ? this.setState({message:\"You won!\"}) : null\n          if (newCount >= 20) {\n            this.setState({message:\"You won!\"})\n          }\n        }\n        else if(randomFace==2){\n          newCount=this.state.count+3;\n          this.setState({count:newCount, display:face3})\n          if(newCount>=20){\n            this.setState({message:\"You won!\"})\n          }\n        }\n        else if(randomFace==3){\n          newCount=this.state.count+4;\n          this.setState({count:newCount, display:face4})\n          if(newCount>=20){\n            this.setState({message:\"You won!\"})\n          }\n        }\n        else if(randomFace==4){\n          newCount=this.state.count+5;\n          this.setState({count:newCount, display:face5})\n          if(newCount>=20){\n            this.setState({message:\"You won!\"})\n          }\n        }\n        else if(randomFace==5){\n          newCount=this.state.count+6;\n          this.setState({count:newCount, display:face6})\n          if(newCount>=20){\n            this.setState({message:\"You won!\"})\n          }\n        }\n    }\n    \n    testPrint=()=>{\n      console.log(\"this image has been clicked\")\n    }\n\n    render(){\n      return (\n\n        //ternary if the message is set to \"you won\", then display just the message, else, display the game\n        <div className=\"App\">\n          {this.state.message === \"You won!\" ? \n              <h1 id=\"message\" className=\"text\">{this.state.message}</h1>\n            :\n            <React.Fragment>\n              <img src={clickPlay} alt=\"default\" onClick={()=>this.roll()} />\n              <img src={this.state.display} alt=\"default\"/>\n              <h1 id=\"count\" className=\"text\">Score: {this.state.count}</h1>\n              <h1 id=\"message\" className=\"text\">{this.state.message}</h1>\n            </React.Fragment>\n          }\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}